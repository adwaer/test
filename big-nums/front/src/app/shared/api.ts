/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {mergeMap as _observableMergeMap, catchError as _observableCatch} from 'rxjs/operators';
import {Observable, throwError as _observableThrow, of as _observableOf} from 'rxjs';
import {Injectable, Inject, Optional, InjectionToken} from '@angular/core';
import {HttpClient, HttpHeaders, HttpResponse, HttpResponseBase} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ApiClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * Get product by id
   * @return Success
   */
  productsGet(id: number): Observable<ProductViewModel> {
    let url_ = this.baseUrl + '/Products/{id}';
    if (id === undefined || id === null) {
      throw new Error('The parameter \'id\' must be defined.');
    }
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'text/plain'
      })
    };

    return this.http.request('get', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processProductsGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processProductsGet(<any> response_);
        } catch (e) {
          return <Observable<ProductViewModel>> <any> _observableThrow(e);
        }
      } else {
        return <Observable<ProductViewModel>> <any> _observableThrow(response_);
      }
    }));
  }

  protected processProductsGet(response: HttpResponseBase): Observable<ProductViewModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any> response).error instanceof Blob ? (<any> response).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductViewModel.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = MiddlewareExceptionWrapper.fromJS(resultData400);
        return throwException('Bad Request', status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = MiddlewareExceptionWrapper.fromJS(resultData500);
        return throwException('Server Error', status, _responseText, _headers, result500);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException('Not Found', status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers);
      }));
    }
    return _observableOf<ProductViewModel>(<any> null);
  }

  /**
   * Update existing product
   * @param body (optional)
   * @return Success
   */
  productsPut(id: number, body: ProductEditRequestModel | undefined): Observable<void> {
    let url_ = this.baseUrl + '/Products/{id}';
    if (id === undefined || id === null) {
      throw new Error('The parameter \'id\' must be defined.');
    }
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      })
    };

    return this.http.request('put', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processProductsPut(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processProductsPut(<any> response_);
        } catch (e) {
          return <Observable<void>> <any> _observableThrow(e);
        }
      } else {
        return <Observable<void>> <any> _observableThrow(response_);
      }
    }));
  }

  protected processProductsPut(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any> response).error instanceof Blob ? (<any> response).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any> null);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = MiddlewareExceptionWrapper.fromJS(resultData400);
        return throwException('Bad Request', status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = MiddlewareExceptionWrapper.fromJS(resultData500);
        return throwException('Server Error', status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any> null);
  }

  /**
   * Delete existing product
   * @return Success
   */
  productsDelete(id: number): Observable<void> {
    let url_ = this.baseUrl + '/Products/{id}';
    if (id === undefined || id === null) {
      throw new Error('The parameter \'id\' must be defined.');
    }
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({})
    };

    return this.http.request('delete', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processProductsDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processProductsDelete(<any> response_);
        } catch (e) {
          return <Observable<void>> <any> _observableThrow(e);
        }
      } else {
        return <Observable<void>> <any> _observableThrow(response_);
      }
    }));
  }

  protected processProductsDelete(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any> response).error instanceof Blob ? (<any> response).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any> null);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = MiddlewareExceptionWrapper.fromJS(resultData400);
        return throwException('Bad Request', status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any> null);
  }

  /**
   * Get all products
   * @param search (optional) Search term
   * @param orderBy (optional) Order column
   * @param isDesc (optional) Is direction desc
   * @param page (optional) Page
   * @param pageSize (optional) Size
   * @return Success
   */
  productsGetAll(search: string | null | undefined, orderBy: string | null | undefined, isDesc: boolean | undefined, page: number | undefined, pageSize: number | undefined): Observable<ProductSearchResponse> {
    let url_ = this.baseUrl + '/Products?';
    if (search !== undefined && search !== null) {
      url_ += 'Search=' + encodeURIComponent('' + search) + '&';
    }
    if (orderBy !== undefined && orderBy !== null) {
      url_ += 'OrderBy=' + encodeURIComponent('' + orderBy) + '&';
    }
    if (isDesc === null) {
      throw new Error('The parameter \'isDesc\' cannot be null.');
    } else if (isDesc !== undefined) {
      url_ += 'IsDesc=' + encodeURIComponent('' + isDesc) + '&';
    }
    if (page === null) {
      throw new Error('The parameter \'page\' cannot be null.');
    } else if (page !== undefined) {
      url_ += 'Page=' + encodeURIComponent('' + page) + '&';
    }
    if (pageSize === null) {
      throw new Error('The parameter \'pageSize\' cannot be null.');
    } else if (pageSize !== undefined) {
      url_ += 'PageSize=' + encodeURIComponent('' + pageSize) + '&';
    }
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'text/plain'
      })
    };

    return this.http.request('get', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processProductsGetAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processProductsGetAll(<any> response_);
        } catch (e) {
          return <Observable<ProductSearchResponse>> <any> _observableThrow(e);
        }
      } else {
        return <Observable<ProductSearchResponse>> <any> _observableThrow(response_);
      }
    }));
  }

  protected processProductsGetAll(response: HttpResponseBase): Observable<ProductSearchResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any> response).error instanceof Blob ? (<any> response).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductSearchResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = MiddlewareExceptionWrapper.fromJS(resultData400);
        return throwException('Bad Request', status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = MiddlewareExceptionWrapper.fromJS(resultData500);
        return throwException('Server Error', status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers);
      }));
    }
    return _observableOf<ProductSearchResponse>(<any> null);
  }

  /**
   * Create new product
   * @param body (optional)
   * @return Success
   */
  productsPost(body: ProductEditRequestModel | undefined): Observable<void> {
    let url_ = this.baseUrl + '/Products';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      })
    };

    return this.http.request('post', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processProductsPost(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processProductsPost(<any> response_);
        } catch (e) {
          return <Observable<void>> <any> _observableThrow(e);
        }
      } else {
        return <Observable<void>> <any> _observableThrow(response_);
      }
    }));
  }

  protected processProductsPost(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any> response).error instanceof Blob ? (<any> response).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any> null);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = MiddlewareExceptionWrapper.fromJS(resultData400);
        return throwException('Bad Request', status, _responseText, _headers, result400);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = MiddlewareExceptionWrapper.fromJS(resultData500);
        return throwException('Server Error', status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any> null);
  }
}

/** Product view model */
export class ProductViewModel implements IProductViewModel {
  /** Id */
  id?: number;
  /** Name */
  name?: string | undefined;
  /** Price */
  price?: number;

  constructor(data?: IProductViewModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) {
          (<any> this)[property] = (<any> data)[property];
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.price = _data['price'];
    }
  }

  static fromJS(data: any): ProductViewModel {
    data = typeof data === 'object' ? data : {};
    let result = new ProductViewModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['price'] = this.price;
    return data;
  }
}

/** Product view model */
export interface IProductViewModel {
  /** Id */
  id?: number;
  /** Name */
  name?: string | undefined;
  /** Price */
  price?: number;
}

export class MiddlewareExceptionWrapper implements IMiddlewareExceptionWrapper {
  readonly message?: string | undefined;

  constructor(data?: IMiddlewareExceptionWrapper) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) {
          (<any> this)[property] = (<any> data)[property];
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any> this).message = _data['message'];
    }
  }

  static fromJS(data: any): MiddlewareExceptionWrapper {
    data = typeof data === 'object' ? data : {};
    let result = new MiddlewareExceptionWrapper();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    return data;
  }
}

export interface IMiddlewareExceptionWrapper {
  message?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) {
          (<any> this)[property] = (<any> data)[property];
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.type = _data['type'];
      this.title = _data['title'];
      this.status = _data['status'];
      this.detail = _data['detail'];
      this.instance = _data['instance'];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['type'] = this.type;
    data['title'] = this.title;
    data['status'] = this.status;
    data['detail'] = this.detail;
    data['instance'] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
}

/** Product view model */
export class ProductEditRequestModel implements IProductEditRequestModel {
  /** Name */
  name?: string | undefined;
  /** Price */
  price?: number;

  constructor(data?: IProductEditRequestModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) {
          (<any> this)[property] = (<any> data)[property];
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      this.price = _data['price'];
    }
  }

  static fromJS(data: any): ProductEditRequestModel {
    data = typeof data === 'object' ? data : {};
    let result = new ProductEditRequestModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['price'] = this.price;
    return data;
  }
}

/** Product view model */
export interface IProductEditRequestModel {
  /** Name */
  name?: string | undefined;
  /** Price */
  price?: number;
}

/** Product search response */
export class ProductSearchResponse implements IProductSearchResponse {
  /** Data */
  data?: ProductViewModel[] | undefined;
  /** Count */
  count?: number;

  constructor(data?: IProductSearchResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) {
          (<any> this)[property] = (<any> data)[property];
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data']) {
          this.data!.push(ProductViewModel.fromJS(item));
        }
      }
      this.count = _data['count'];
    }
  }

  static fromJS(data: any): ProductSearchResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ProductSearchResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) {
        data['data'].push(item.toJSON());
      }
    }
    data['count'] = this.count;
    return data;
  }
}

/** Product search response */
export interface IProductSearchResponse {
  /** Data */
  data?: ProductViewModel[] | undefined;
  /** Count */
  count?: number;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined) {
    return _observableThrow(result);
  } else {
    return _observableThrow(new ApiException(message, status, response, headers, null));
  }
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((<any> event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
